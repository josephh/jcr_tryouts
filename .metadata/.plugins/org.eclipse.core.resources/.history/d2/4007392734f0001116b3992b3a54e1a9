package com.centrica.jcr.load.xml;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;

import javax.jcr.ImportUUIDBehavior;
import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.Property;
import javax.jcr.PropertyIterator;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;
import javax.jcr.Value;

import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.jackrabbit.rmi.repository.URLRemoteRepository;

/**
 * Imports an example XML file and outputs the contents of the entire workspace.
 */
public class XmlLoaderTryout {

	private static final String WORKSPACE = "crx.default";
	private static final String REPOSITORY_URI = "rmi://localhost:1234/crx";

	/**
	 * The main entry point of the example application.
	 * 
	 * @param args
	 *            <ol>
	 *            <li>a relative path of the node to add content under (or to
	 *            replace entirely), for example
	 *            <b>/content/sysadmin/products</b>;</li>
	 *            <li>character string, <b>replace</b>. This argument is
	 *            optional, the default is to add any values found in input,
	 *            whether they are duplicates or not.</li>
	 *            </ol>
	 * <br>
	 *            Input values are searched for on the class path (of this
	 *            program), by looking for files with names that start with the
	 *            same character string as the node name. <br>
	 *            For example, when adding to node with name <b>products</b>,
	 *            the file <b>products1.xml</b> will be read, (and so will files
	 *            <b>products2.xml</b> and <b>products3.xml</b>).
	 * @throws Exception
	 *             if an error occurs
	 */
	public static void main(String[] args) throws Exception {

		if (args.length >= 1) {
			throw new IllegalArgumentException("Missing program parameters.");
		}
		final String nodeName = args[0].toLowerCase();

		boolean replace;
		if (null != args[1]) {
			if ("replace".equals(args[1].toLowerCase()))
				replace = true;
		}

		// RMI remoting access to a CRX server (with RMI enabled)
		Repository repository = JcrUtils.getRepository(REPOSITORY_URI);
		Session session = repository.login(new SimpleCredentials("admin",
				"admin".toCharArray()), WORKSPACE);
		try {
			Node root = session.getRootNode(); // get the root for the sake of
												// appearances.
			System.out.println(getChildNodeNames(root));

			if (replaceNode()) {
			}

			Node relativeNode = root.getNode("content/sysadmin");
			System.out.println(getChildNodeNames(relativeNode));
			final String PRODUCTS_NODE_NAME = "products";
			if (relativeNode.hasNode(PRODUCTS_NODE_NAME)) {
				System.out.print("Found " + PRODUCTS_NODE_NAME
						+ " - deleting it... ");
				relativeNode.getNode(PRODUCTS_NODE_NAME).remove();

				// Create an unstructured node under which to import the XML
				Node node = relativeNode.addNode(PRODUCTS_NODE_NAME,
						"nt:unstructured");

				// Import the file under the created node
				URL res = XmlLoaderTryout.class.getResource("/product1.xml");
				FileInputStream xml = new FileInputStream(new File(res.toURI()));
				session.importXML(node.getPath(), xml,
						ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW);
				xml.close();
				session.save();
				System.out.println("done.");
			}

			// output the repository content
			dump(root);
		} finally {
			session.logout();
		}
	}

	private static boolean replaceNode() {
		// TODO Auto-generated method stub
		return "replace".equals(addorre)
	}

	private static StringBuilder getChildNodeNames(Node node)
			throws RepositoryException {
		StringBuilder sb = new StringBuilder();
		sb.append("Looping over child node paths (for " + node.getName()
				+ ")..." + "\n");
		for (Node n : JcrUtils.getChildNodes(node)) {
			sb.append(n.getName() + "\n");
		}
		return sb;
	}

	/** Recursively outputs the contents of the given node. */
	private static void dump(Node node) throws RepositoryException {
		// First output the node path
		System.out.println(node.getPath());
		// Skip the virtual (and large!) jcr:system subtree
		if (node.getName().equals("jcr:system")) {
			return;
		}

		// Then output the properties
		PropertyIterator properties = node.getProperties();
		while (properties.hasNext()) {
			Property property = properties.nextProperty();
			if (property.getDefinition().isMultiple()) {
				// A multi-valued property, print all values
				Value[] values = property.getValues();
				for (int i = 0; i < values.length; i++) {
					System.out.println(property.getPath() + " = "
							+ values[i].getString());
				}
			} else {
				// A single-valued property
				System.out.println(property.getPath() + " = "
						+ property.getString());
			}
		}

		// Finally output all the child nodes recursively
		NodeIterator nodes = node.getNodes();
		while (nodes.hasNext()) {
			dump(nodes.nextNode());
		}
	}

}