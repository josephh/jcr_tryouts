package com.centrica.jcr.load.xml;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;

import javax.jcr.ImportUUIDBehavior;
import javax.jcr.InvalidSerializedDataException;
import javax.jcr.ItemExistsException;
import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.PathNotFoundException;
import javax.jcr.Property;
import javax.jcr.PropertyIterator;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;
import javax.jcr.Value;
import javax.jcr.lock.LockException;
import javax.jcr.nodetype.ConstraintViolationException;
import javax.jcr.version.VersionException;

import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.jackrabbit.rmi.repository.URLRemoteRepository;

/**
 * Imports an example XML file and outputs the contents of the entire workspace.
 */
public class XmlLoaderTryout {

	private static final String WORKSPACE = "crx.default";
	private static final String REPOSITORY_URI = "rmi://localhost:1234/crx";

	/**
	 * The main entry point of the example application.
	 * 
	 * @param args
	 *            <ol>
	 *            <li>a relative path of the node to add content under (or to
	 *            replace entirely), for example
	 *            <b>/content/sysadmin/products</b>;</li>
	 *            <li>character string, <b>replace</b>. This argument is
	 *            optional, the default is to add any values found in input,
	 *            whether they are duplicates or not.</li>
	 *            </ol>
	 * <br>
	 *            Input values are searched for on the class path (of this
	 *            program), by looking for files with names that start with the
	 *            same character string as the final element of the relative
	 *            node path.<br>
	 *            For example, when adding to node with name <b>products</b>,
	 *            the file <b>products1.xml</b> will be read, (and so will files
	 *            <b>products2.xml</b> and <b>products3.xml</b>).
	 * @throws Exception
	 *             if an error occurs
	 */
	public static void main(String[] args) throws Exception {

		if (args.length <= 0) {
			throw new IllegalArgumentException("Missing program parameters.");
		}
		final String nodeName = args[0].toLowerCase();

		boolean replace = false;
		if (null != args[1]) {
			if ("replace".equals(args[1].toLowerCase()))
				replace = true;
		}

		// RMI remoting access to a CRX server (with RMI enabled)
		Repository repository = JcrUtils.getRepository(REPOSITORY_URI);
		Session session = repository.login(new SimpleCredentials("admin",
				"admin".toCharArray()), WORKSPACE);

		addNodes(session, nodeName, replace);

	}

	private static void addNodes(Session session, String nodeName,
			boolean replace) {
		Node n = null;
		try {
			Node root = session.getRootNode();
			printChildNodeNames(root);

			if (root.hasNode(nodeName)) {
				n = root.getNode(nodeName);

				if (replace) {
					n.remove();
					addNodes(session, nodeName, false); /*
														 * recurse, avoiding
														 * this if(){...} clause
														 * on the next visit
														 */
				}
			} else {
				n = root.addNode(nodeName, "nt:unstructured");
			}

			addFileContents(session, nodeName, n);

			/* for illustration...output the repository content */
			dump(root);

		} catch (RepositoryException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			session.logout();
		}
	}

	private static void addFileContents(Session session, String nodeName,
			Node containingNode) {

		/* find files that match the program parameter */
		// URL res = XmlLoaderTryout.class.getResource("/products1.xml");

		System.out.println("Thread wise, where am i? : "
				+ Thread.currentThread().getName());
		Enumeration<URL> urls;
		try {
			urls = XmlLoaderTryout.class.getClassLoader().getResources(""); /*
																			 * look
																			 * for
																			 * any
																			 * files
																			 * ,
																			 * at
																			 * the
																			 * top
																			 * of
																			 * the
																			 * classloaders
																			 * 'tree'
																			 * of
																			 * file
																			 * resources
																			 */

			URL metaInf = null;
			File[] files = null;
			if (urls.hasMoreElements()) {
				metaInf = urls.nextElement();
				File fileMetaInf = new File(metaInf.toURI());

				files = fileMetaInf.listFiles(); /*
												 * ...and process any file that
												 * matches, with reasonable
												 * accuracy, the supplied
												 * program parameter
												 */

				for (File f : files) {
					FileInputStream xml = new FileInputStream(f);
					session.importXML(containingNode.getPath(), xml,
							ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW);
					xml.close();
					session.save();
					System.out.println("done.");

				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private FileFilter customFilter=new FileFilter() {
	    @Override
	    public boolean accept(File pathname) {

	        if(pathname.isDirectory()) {
	            pathname.listFiles(this);
	        }
	        if(pathname.getName().endsWith("bla.xml")) {
	            foundFiles.add(pathname);
	            return true;
	        }
	        return false;
	    }

	};      
	
	private static void printChildNodeNames(Node node)
			throws RepositoryException {
		StringBuilder sb = new StringBuilder();
		sb.append("Looping over child node paths (for " + node.getName()
				+ ")..." + "\n");
		for (Node n : JcrUtils.getChildNodes(node)) {
			sb.append(n.getName() + "\n");
		}
		System.out.println(sb);
	}

	/** Recursively outputs the contents of the given node. */
	private static void dump(Node node) throws RepositoryException {
		// First output the node path
		System.out.println(node.getPath());
		// Skip the virtual (and large!) jcr:system subtree
		if (node.getName().equals("jcr:system")) {
			return;
		}

		// Then output the properties
		PropertyIterator properties = node.getProperties();
		while (properties.hasNext()) {
			Property property = properties.nextProperty();
			if (property.getDefinition().isMultiple()) {
				// A multi-valued property, print all values
				Value[] values = property.getValues();
				for (int i = 0; i < values.length; i++) {
					System.out.println(property.getPath() + " = "
							+ values[i].getString());
				}
			} else {
				// A single-valued property
				System.out.println(property.getPath() + " = "
						+ property.getString());
			}
		}

		// Finally output all the child nodes recursively
		NodeIterator nodes = node.getNodes();
		while (nodes.hasNext()) {
			dump(nodes.nextNode());
		}
	}

}